{"version":3,"sources":["login.svg","components/login/Login.jsx","components/login/Register.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","props","className","ref","this","containerRef","src","loginImg","alt","htmlFor","type","name","placeholder","React","Component","Register","App","state","isLogginActive","rightSide","classList","add","remove","setState","prevState","current","currentActive","container","onClick","changeState","bind","RightSide","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.35178a9a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/login.cba154e7.svg\";","import React from 'react';\nimport loginImg from '../../login.svg';\n\nexport class Login extends React.Component{\n    constructor(props)\n    {\n        super(props);\n    }\n\n    render(){\n        return <div className=\"base-container\" ref={this.props.containerRef}>\n            <div className=\"header\">Login</div>\n            <div className=\"content\">\n                    <div className=\"image\">\n                        <img src={loginImg} alt=\"Login Image\"/>\n                    </div>\n                    <div className=\"form\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"username\">Username</label>\n                            <input type=\"text\" name=\"username\" placeholder=\"Enter Username\"/>   \n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"password\">Password</label>\n                            <input type=\"password\" name=\"password\" placeholder=\"Enter Password\"/>   \n                        </div>\n                    </div>\n            </div>\n            <div className=\"footer\">\n                <button type =\"button\" className=\"btn\">Login</button>\n            </div>\n        </div>\n    }\n}\n\n","import React from 'react';\nimport loginImg from '../../login.svg';\n\nexport class Register extends React.Component{\n    constructor(props)\n    {\n        super(props);\n    }\n\n    render(){\n        return <div className=\"base-container\"ref={this.props.containerRef}>\n            <div className=\"header\">Register</div>\n            <div className=\"content\">\n                    <div className=\"image\">\n                        <img src={loginImg} alt=\"Login Image\"/>\n                    </div>\n                    <div className=\"form\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"username\">Username</label>\n                            <input type=\"text\" name=\"username\" placeholder=\"Enter Username\"/>   \n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"email\">E-mail</label>\n                            <input type=\"email\" name=\"email\" placeholder=\"Enter E-mail\"/>   \n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"password\">Password</label>\n                            <input type=\"password\" name=\"password\" placeholder=\"Enter Password\"/>   \n                        </div>\n                    </div>\n            </div>\n            <div className=\"footer\">\n                <button type =\"button\" className=\"btn\">Register</button>\n            </div>\n        </div>\n    }\n}\n\n","import React from \"react\";\nimport \"./App.scss\";\nimport { Login, Register } from \"./components/login/index\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLogginActive: true\n    };\n  }\n\n  componentDidMount() {\n    //Add .right by default\n    this.rightSide.classList.add(\"right\");\n  }\n\n  changeState() {\n    const { isLogginActive } = this.state;\n\n    if (isLogginActive) {\n      this.rightSide.classList.remove(\"right\");\n      this.rightSide.classList.add(\"left\");\n    } else {\n      this.rightSide.classList.remove(\"left\");\n      this.rightSide.classList.add(\"right\");\n    }\n    this.setState(prevState => ({ isLogginActive: !prevState.isLogginActive }));\n  }\n\n  render() {\n    const { isLogginActive } = this.state;\n    const current = isLogginActive ? \"Register\" : \"Login\";\n    const currentActive = isLogginActive ? \"login\" : \"register\";\n    return (\n      <div className=\"App\">\n        <div className=\"login\">\n          <div className=\"container\" ref={ref => (this.container = ref)}>\n            {isLogginActive && (\n              <Login containerRef={ref => (this.current = ref)} />\n            )}\n            {!isLogginActive && (\n              <Register containerRef={ref => (this.current = ref)} />\n            )}\n          </div>\n          <RightSide\n            current={current}\n            currentActive={currentActive}\n            containerRef={ref => (this.rightSide = ref)}\n            onClick={this.changeState.bind(this)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst RightSide = props => {\n  return (\n    <div\n      className=\"right-side\"\n      ref={props.containerRef}\n      onClick={props.onClick}\n    >\n      <div className=\"inner-container\">\n        <div className=\"text\">{props.current}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}